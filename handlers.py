import time
import threading
from io import BytesIO
from typing import Optional, Dict, Any, List
import requests
from telebot import types
# –∏–º–ø–æ—Ä—Ç—ã –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞:
from core import bot, auto_delete_message, back_kb, start_menu, admin_main_menu, grade_menu_kb, coursework_card_kb


from core import (
    bot,
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã –∏–∑ core
    start_menu, back_kb, admin_main_menu, grade_menu_kb, coursework_card_kb,
    get_contextual_help, auto_delete_message, extract_file_urls,
    # –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    STATUS_NEW, STATUS_REVIEWING, STATUS_CHECKED, STATUS_REJECTED, POSSIBLE_CHAT_FIELDS,
    SENT_COURSEWORK_IDS, TEACHER_CACHE_BY_CHAT, ADMIN_USERS,
    # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ —Å–µ—Ä–≤–∏—Å—ã
    STATE_LOCK, SHUTDOWN_EVENT, save_state, anti_flood,
    # –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ
    teacher_chat_id_from_teacher,
)
from api import (
    get_teachers, get_teacher, get_student,
    get_courseworks, get_coursework, update_coursework,
)
from config import ADMIN_PASSWORD

# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================

def is_admin(uid: int) -> bool:
    with STATE_LOCK:
        return uid in ADMIN_USERS

def teacher_from_chat(chat_id: int) -> Optional[Dict[str, Any]]:
    key = str(chat_id)
    with STATE_LOCK:
        if key in TEACHER_CACHE_BY_CHAT:
            return TEACHER_CACHE_BY_CHAT[key]
    teachers = get_teachers()
    for t in teachers:
        for fld in POSSIBLE_CHAT_FIELDS:
            val = t.get(fld)
            if val is not None and str(val) == str(chat_id):
                with STATE_LOCK:
                    TEACHER_CACHE_BY_CHAT[key] = t
                    save_state()
                return t
    return None

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
MAX_FILE_BYTES = 20 * 1024 * 1024
DL_TIMEOUT = (10, 30)  # connect, read
DL_RETRIES = 2

def _download_small_file(url: str, max_bytes: int = MAX_FILE_BYTES) -> Optional[BytesIO]:
    # HEAD –¥–ª—è –æ—Ü–µ–Ω–∫–∏ Content-Length
    try:
        h = requests.head(url, timeout=10, allow_redirects=True)
        clen = int(h.headers.get("Content-Length") or 0)
        if clen and clen > max_bytes:
            print(f"skip large file: {clen} > {max_bytes} at {url}")
            return None
    except Exception:
        pass  # –µ—Å–ª–∏ HEAD –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º GET –Ω–∏–∂–µ

    for attempt in range(DL_RETRIES + 1):
        try:
            with requests.get(url, timeout=DL_TIMEOUT, stream=True) as r:
                r.raise_for_status()
                bio = BytesIO()
                total = 0
                for chunk in r.iter_content(chunk_size=64 * 1024):
                    if not chunk:
                        continue
                    bio.write(chunk)
                    total += len(chunk)
                    if total > max_bytes:
                        print(f"download exceeded limit {total} > {max_bytes} at {url}")
                        return None
                bio.seek(0)
                return bio
        except Exception as e:
            if attempt >= DL_RETRIES:
                print(f"download failed: {e} url={url}")
                return None
            time.sleep(0.7 * (attempt + 1))
    return None

# =========================
# –ö–æ–º–∞–Ω–¥—ã
# =========================

@bot.message_handler(commands=["start"])
@anti_flood('msg')
def cmd_start(msg):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StartFit Bot!\n\n"
        "ü§ñ –ü–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ —Å –∫—É—Ä—Å–æ–≤—ã–º–∏.\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.\n\n"
        "üë®üíº –î–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ."
    )
    bot.send_message(msg.chat.id, text, reply_markup=start_menu())

@bot.message_handler(commands=["help"])
@anti_flood('msg')
def cmd_help(msg):
    help_text = (
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üî∏ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "üî∏ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "üî∏ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n\n"
        "üîê –î–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ."
    )
    bot.send_message(msg.chat.id, help_text, reply_markup=back_kb())

@bot.message_handler(commands=["admin"])
@anti_flood('msg')
def cmd_admin(msg):
    if not is_admin(msg.from_user.id):
        bot.send_message(
            msg.chat.id,
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=back_kb(),
        )
        return
    bot.send_message(msg.chat.id, "üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_main_menu())

@bot.message_handler(func=lambda m: ADMIN_PASSWORD and m.text == ADMIN_PASSWORD)
@anti_flood('msg')
def admin_auth(msg):
    with STATE_LOCK:
        ADMIN_USERS.add(msg.from_user.id)
        save_state()
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üë®üíº –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_main"),
        types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"),
    )
    try:
        bot.delete_message(msg.chat.id, msg.message_id)
    except Exception:
        pass
    bot.send_message(msg.chat.id, "üîì –ê–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!\nüë®üíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

# =========================
# –û–±—â–∏–µ callback'–∏
# =========================

@bot.callback_query_handler(func=lambda c: c.data == "start")
@anti_flood('cb')
def on_start_cb(call):
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StartFit Bot!\n\n"
        "ü§ñ –ü–æ–º–æ—â—å –≤ —Ä–∞–±–æ—Ç–µ —Å –∫—É—Ä—Å–æ–≤—ã–º–∏.\n"
        "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID.\n\n"
        "üë®üíº –î–ª—è –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ."
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=start_menu())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "get_id")
@anti_flood('cb')
def on_get_id(call):
    text = (
        "üÜî –í–∞—à Telegram chat_id:\n\n"
        f"{call.from_user.id}\n\n"
        "üìã –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        "üí° –ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ."
    )
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=back_kb())
    bot.answer_callback_query(call.id, "ID –≥–æ—Ç–æ–≤ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é!")

@bot.callback_query_handler(func=lambda c: c.data.startswith("help_"))
@anti_flood('cb')
def on_help_cb(call):
    ctx = call.data.split("_", 1)[1]
    bot.answer_callback_query(call.id, get_contextual_help(ctx), show_alert=True)

# =========================
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# =========================

@bot.callback_query_handler(func=lambda c: c.data == "admin_main")
@anti_flood('cb')
def on_admin_main(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.edit_message_text("üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", call.message.chat.id, call.message.message_id, reply_markup=admin_main_menu())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "admin_pending")
@anti_flood('cb')
def on_admin_pending(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    teachers = get_teachers()
    courseworks = get_courseworks()
    if courseworks is None:
        bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", call.message.chat.id, call.message.message_id, reply_markup=back_kb("admin_main"))
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    pending_count: Dict[str, int] = {}
    for cw in courseworks:
        if cw.get("status") == STATUS_REVIEWING:
            tid = str(cw.get("teacher_id", ""))
            pending_count[tid] = pending_count.get(tid, 0) + 1
    text = "‚è≥ –ö—É—Ä—Å–æ–≤—ã–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
    for t in teachers:
        tid = str(t.get("id", ""))
        name = t.get("name", f"ID: {tid}")
        count = pending_count.get(tid, 0)
        text += f"üë®üè´ {name}: {count}\n"
    total_pending = sum(pending_count.values())
    text += f"\nüìä –í—Å–µ–≥–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: {total_pending}"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=back_kb("admin_main"))
    bot.answer_callback_query(call.id, f"–ù–∞–π–¥–µ–Ω–æ {total_pending} –∫—É—Ä—Å–æ–≤—ã—Ö –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")

@bot.callback_query_handler(func=lambda c: c.data == "admin_search")
@anti_flood('cb')
def on_admin_search(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    bot.edit_message_text(
        "üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –∏–ª–∏ 123",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=back_kb("admin_main"),
    )
    bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

@bot.message_handler(func=lambda m: is_admin(m.from_user.id))
@anti_flood('msg')
def admin_free_search(msg):
    q = (msg.text or "").strip().lower()
    if not q:
        return
    teachers = get_teachers()
    found: List[Dict[str, Any]] = []
    for t in teachers:
        tid = str(t.get("id", ""))
        name = (t.get("name") or "").lower()
        if q == tid or q in name:
            found.append(t)
    if not found:
        bot.reply_to(msg, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    kb = types.InlineKeyboardMarkup(row_width=1)
    for t in found[:50]:
        tid = t.get("id")
        name = t.get("name", f"ID: {tid}")
        kb.add(types.InlineKeyboardButton(f"üë®üè´ {name}", callback_data=f"view_{tid}"))
    bot.reply_to(msg, f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(found)}", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("view_"))
@anti_flood('cb')
def on_view_teacher(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    tid = call.data.split("_", 1)[1]
    cws = [cw for cw in (get_courseworks() or []) if str(cw.get("teacher_id", "")) == tid]
    teacher = get_teacher(tid)
    name = teacher.get("name", f"ID: {tid}") if teacher else f"ID: {tid}"
    if not cws:
        text = f"üë®üè´ {name}\n\nüìã –ö—É—Ä—Å–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    else:
        text = f"üë®üè´ {name}\n\nüìä –í—Å–µ–≥–æ –∫—É—Ä—Å–æ–≤—ã—Ö: {len(cws)}\n\n"
        for i, cw in enumerate(cws, 1):
            sid = cw.get("student_id")
            student = get_student(sid) if sid else None
            sname = student.get("name", f"ID:{sid}") if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            status = cw.get("status", "?")
            grade = cw.get("grade")
            line = f"{i}. {cw.get('title','')} ‚Äî {sname} ‚Äî {status}"
            if grade:
                line += f" (‚≠ê{grade})"
            text += line + "\n"
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=back_kb("admin_main"))
    bot.answer_callback_query(call.id, f"–ü–æ–∫–∞–∑–∞–Ω–æ –∫—É—Ä—Å–æ–≤—ã—Ö: {len(cws)}")

# =========================
# –ö—É—Ä—Å–æ–≤—ã–µ: —Å—Ç–∞—Ç—É—Å—ã/–æ—Ü–µ–Ω–∫–∏
# =========================

@bot.callback_query_handler(func=lambda c: c.data.startswith("status_reviewing_"))
@anti_flood('cb')
def on_status_reviewing(call):
    cid = call.data.split("_")[-1]
    if update_coursework(cid, STATUS_REVIEWING):
        bot.answer_callback_query(call.id, "‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'!")
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        sent = bot.send_message(call.message.chat.id, "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        auto_delete_message(call.message.chat.id, sent.message_id, delay=3)
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@bot.callback_query_handler(func=lambda c: c.data.startswith("grade_menu_"))
@anti_flood('cb')
def on_grade_menu(call):
    cid = call.data.split("_")[-1]
    new_text = (call.message.text or "") + "\n\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:"
    bot.edit_message_text(new_text, call.message.chat.id, call.message.message_id, reply_markup=grade_menu_kb(cid))
    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É 2‚Äì5")

@bot.callback_query_handler(func=lambda c: c.data.startswith("set_grade_"))
@anti_flood('cb')
def on_set_grade(call):
    _, _, cid, gr = call.data.split("_")
    try:
        grade = int(gr)
    except Exception:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
        return
    if update_coursework(cid, STATUS_CHECKED, grade=grade):
        bot.answer_callback_query(call.id, f"‚úÖ –û—Ü–µ–Ω–∫–∞ {grade} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ'!")
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        sent = bot.send_message(call.message.chat.id, f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ! –û—Ü–µ–Ω–∫–∞: {grade}")
        auto_delete_message(call.message.chat.id, sent.message_id, delay=5)
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")

@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_"))
@anti_flood('cb')
def on_cancel(call):
    cid = call.data.split("_")[-1]
    kb = coursework_card_kb(cid)
    orig = (call.message.text or "").split("\n\nüìù")[0]
    bot.edit_message_text(orig, call.message.chat.id, call.message.message_id, reply_markup=kb)
    bot.answer_callback_query(call.id, "‚ùå –í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω")

# =========================
# –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
# =========================

@bot.callback_query_handler(func=lambda c: c.data == "teacher_main")
@anti_flood('cb')
def on_teacher_main(call):
    teacher = teacher_from_chat(call.from_user.id)
    if not teacher:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    bot.edit_message_text(
        f"üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.get('name')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=_teacher_main_menu(),
    )
    bot.answer_callback_query(call.id)

def _teacher_main_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏", callback_data="my_students"),
        types.InlineKeyboardButton("‚úçÔ∏è –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="manual_review_list"),
        types.InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start"),
    )
    return kb

@bot.callback_query_handler(func=lambda c: c.data == "my_students")
@anti_flood('cb')
def on_my_students(call):
    teacher = teacher_from_chat(call.from_user.id)
    students = teacher.get("students", []) if teacher else []
    if not students:
        text = "üë• –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        text = "üë• –í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:\n\n" + "\n".join(f"‚Ä¢ {s.get('name')} (ID: {s.get('id')})" for s in students)
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=back_kb("teacher_main"))
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data == "manual_review_list")
@anti_flood('cb')
def on_manual_review_list(call):
    teacher = teacher_from_chat(call.from_user.id)
    if not teacher:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        return
    all_cw = get_courseworks() or []
    to_review = [cw for cw in all_cw if str(cw.get("teacher_id")) == str(teacher.get("id")) and cw.get("status") == STATUS_REVIEWING]
    if not to_review:
        text = "‚úçÔ∏è –ö—É—Ä—Å–æ–≤—ã—Ö –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        kb = back_kb("teacher_main")
    else:
        text = "‚úçÔ∏è –ö—É—Ä—Å–æ–≤—ã–µ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(f"‚Ä¢ {cw.get('title')} (ID: {cw.get('id')})" for cw in to_review)
        kb = types.InlineKeyboardMarkup(row_width=1)
        for cw in to_review:
            kb.add(types.InlineKeyboardButton(f"{cw.get('title')}", callback_data=f"t_manual_{cw.get('id')}"))
        kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="teacher_main"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("t_manual_"))
@anti_flood('cb')
def on_teacher_manual(call):
    cw_id = call.data.split("_")[-1]
    cw = get_coursework(cw_id)
    if not cw:
        bot.answer_callback_query(call.id, "‚ùå –ö—É—Ä—Å–æ–≤–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    student = get_student(cw.get("student_id"))
    text = (
        "‚úçÔ∏è –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:\n\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {cw.get('title')}\n"
        f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.get('name') if student else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        f"üÜî ID: {cw_id}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å (–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ)", callback_data=f"status_reviewing_{cw_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"set_reject_{cw_id}"),
    )
    kb.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manual_review_list"))
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=kb)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda c: c.data.startswith("set_reject_"))
@anti_flood('cb')
def on_set_reject(call):
    cw_id = call.data.split("_")[-1]
    if update_coursework(cw_id, STATUS_REJECTED):
        bot.answer_callback_query(call.id, "‚úÖ –ö—É—Ä—Å–æ–≤–∞—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        try:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏")

# =========================
# –§–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∫—É—Ä—Å–æ–≤—ã—Ö
# =========================

_POLL_THREAD: Optional[threading.Thread] = None

def _send_coursework_to_chat(chat_id: int, cw: Dict[str, Any], student: Optional[Dict[str, Any]] = None):
    cw_id = cw.get("id")
    title = cw.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    status = cw.get("status", STATUS_NEW)
    sname = student.get("name") if student else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    msg = (
        "üìö –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞\n"
        f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n"
        f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {sname}\n"
        f"üÜî ID: {cw_id}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}"
    )
    try:
        bot.send_message(chat_id, msg, reply_markup=coursework_card_kb(cw_id))
    except Exception as e:
        print(f"send card error cw {cw_id} chat {chat_id}: {e}")
        return
    files = extract_file_urls(cw)
    for i, f in enumerate(files, 1):
        url = f["url"]; name = f["name"]
        bio = _download_small_file(url)
        if not bio:
            continue
        bio.name = name
        try:
            bot.send_document(chat_id, bio, caption=f"üìé –§–∞–π–ª {i}/{len(files)}")
        except Exception as e:
            print(f"file send error {url} cw {cw_id} chat {chat_id}: {e}")

def _poll_loop():
    err = 0
    base_sleep = 20
    while not SHUTDOWN_EVENT.is_set():
        try:
            cws = get_courseworks()
            with STATE_LOCK:
                sent = set(SENT_COURSEWORK_IDS)
            for cw in cws:
                cw_id = str(cw.get("id") or "")
                if not cw_id or cw_id in sent:
                    continue
                status = cw.get("status", "")
                if status not in (STATUS_NEW, STATUS_REVIEWING):
                    with STATE_LOCK:
                        SENT_COURSEWORK_IDS.add(cw_id)
                        save_state()
                    continue
                teacher_id = cw.get("teacher_id")
                teacher = get_teacher(teacher_id) if teacher_id else None
                chat_id = teacher_chat_id_from_teacher(teacher)
                student = get_student(cw.get("student_id")) if cw.get("student_id") else None
                if chat_id:
                    _send_coursework_to_chat(chat_id, cw, student=student)
                    with STATE_LOCK:
                        SENT_COURSEWORK_IDS.add(cw_id)
                        save_state()
            err = 0  # —É—Å–ø–µ—à–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
        except Exception as e:
            err += 1
            print(f"[poll] error (#{err}): {e}")
        # —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ
        sleep_s = base_sleep if err == 0 else min(base_sleep * (2 ** min(err, 5)), 300)
        for _ in range(int(sleep_s * 10)):
            if SHUTDOWN_EVENT.is_set():
                break
            time.sleep(0.1)

def start_background_poll():
    global _POLL_THREAD
    if _POLL_THREAD and _POLL_THREAD.is_alive():
        return
    _POLL_THREAD = threading.Thread(target=_poll_loop, daemon=True, name="poll-courseworks")
    _POLL_THREAD.start()

def stop_background_poll():
    SHUTDOWN_EVENT.set()
    t = _POLL_THREAD
    if t and t.is_alive():
        t.join(timeout=5)
